#!/usr/bin/env bash

source "$LOG_LIB"

# constants
readonly GITHUB_URL="github.com"
readonly USERNAME="iamnewton"
readonly REPO="dotpackages"
readonly LOG="/tmp/$REPO.log"
readonly INSTALL_DIR="$HOME/.$REPO"
OS="$(tr '[:upper:]' '[:lower:]' <<<"$(uname)")"
readonly OS

seek_confirmation() {
	local message=$1

	print_warning "$message"
	read -r -p "Continue? (y/n) " -n 1
}

is_confirmed() {
	if [[ "$REPLY" =~ ^[Yy]$ ]]; then
		return 0
	fi
	return 1
}

npm_package() {
	local package=$1

	# Test whether npm package is already installed
	print_process "Checking if $package is installed"
	if ! npm list -g "$package" | grep "$package" &>/dev/null; then
		print_process "Installing $package"
		npm install --global --quiet "$package"
	else
		print_process "$package is already installed. Updating."
		npm update "$package"
	fi
}

whalebrew_package() {
	local package=$1

	print_process "Checking if $package is installed"
	if ! whalebrew list | grep -q "$package"; then
		print_process "Installing $package"
		whalebrew install "$package"
	else
		print_process "$package is already installed."
	fi
}

install_packages() {
	local installer_func=$1
	local file=$2

	while IFS="" read -r p || [ -n "$p" ]; do
		# Skip blank lines or comments
		[[ -z "$p" || "$p" =~ ^# ]] && continue
		"$installer_func" "$p"
	done < "$file"
}

# Check for Homebrew; install brew
if ! type -P 'brew' &>/dev/null; then
	print_process "Installing Homebrew"
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

	# If we're on Linux, insert brew into the path temporarily to be able to use later
	if [[ "$OS" == "linux" ]]; then
		print_process "Sourcing Homebrew to PATH"
		eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
	fi

	[[ $? ]] && print_success "Homebrew installed"
fi

# If missing, download and extract the dotpackages repository
# @TODO: create upgrade command
# print_process "$REPO already installed.  Upgrading $REPO"
# dotpackages
if ! [[ -d "$INSTALL_DIR" ]]; then
	print_warning "No $INSTALL_DIR found"

	print_process "Creating directory at $INSTALL_DIR and setting permissions"
	mkdir -p "$INSTALL_DIR"

	print_process "Downloading repository to /tmp directory"
	# (-#) shows the progress bar as # sign
	# (-f) fail silently
	# (-L) follow the headers
	# (-o) output to a file
	curl -#fLo /tmp/dotpackages.tar.gz "https://$GITHUB_URL/$USERNAME/$REPO/tarball/main"

	print_process "Extracting files to $INSTALL_DIR"
	tar -zxf "/tmp/$REPO.tar.gz" --strip-components 1 -C "$INSTALL_DIR"

	print_process "Removing tarball from /tmp directory"
	rm -rf "/tmp/$REPO.tar.gz"

	[[ $? ]] && print_success "$INSTALL_DIR created, repository downloaded and extracted"
fi

if ! [[ -d "$INSTALL_DIR/.git" ]]; then
	# Change to the dotpackages directory
	cd "$INSTALL_DIR" || exit

	# Initialize the git repository if it's missing
	print_process "Initializing git repository"
	git init

	print_process "Setting main as the default branch"
	git branch -m main

	print_process "Adding https://$GITHUB_URL/$USERNAME/$REPO.git as origin"
	git remote add origin "https://$GITHUB_URL/$USERNAME/$REPO.git"

	print_process "Downloading changes from origin"
	git fetch origin main

	# Reset the index and working tree to the fetched HEAD
	# (submodules are cloned in the subsequent sync step)
	print_process "Resetting index & working tree to fetched HEAD"
	git reset --hard FETCH_HEAD

	# Remove any untracked files
	print_process "Removing any untracked files"
	git clean -fd

	[[ $? ]] && print_success "Repository has been initialized"

	# Pull down the latest changes
	print_process "Pulling down latest changes"
	git pull --rebase origin main

	[[ $? ]] && print_success "Repository has been updated"
fi

# Install Homebrew formulae
if ! type -P 'brew' &>/dev/null; then
	print_error "brew not found"
	exit 1
else
	print_process "Installing Homebrew packages"

	brew update
	brew upgrade
	brew bundle --file="$INSTALL_DIR/opt/Brewfile"
	brew cleanup

	[[ $? ]] && print_success "Installed all Homebrew packages"
fi

# Install Node packages
if ! type -P 'npm' &>/dev/null; then
	print_error "npm not found"
	exit 1
else
	print_process "Installing and updating npm packages"
	npm cache clean -f
	n stable
	install_packages npm_package "$INSTALL_DIR/opt/npm"

	[[ $? ]] && print_success "Installed all Node packages"
fi

# Automatically set 1Password session after logging in
if [ -x "$(command -v op)" ]; then
	print_process "Configuring 1Password CLI"
	printf "eval \$(op signin %s)\\n" "$USERNAME" >>"$HOME/.bash_profile.local"

	[[ $? ]] && print_success "Configured 1Password CLI"
fi

if [ -x "$(command -v fzf)" ]; then
	print_process "Installing FZF keybindings and fuzzy completion"
	print_info "Do not say 'yes' to update the shell configuration, it's already set up"
	"$(brew --prefix)/opt/fzf/install"

	[[ $? ]] && print_success "Installed FZF keybindings and fuzzy completion"
fi

# Install Gitmoji Fuzzy Hook
if ! type -P 'git' &>/dev/null; then
	print_error "git not found"
	exit 1
else
	print_process "Installing Gitmoji"
	git clone https://gitlab.com/raabf/gitmoji-fuzzy-hook.git "$HOME/.local/share/gitmoji-fuzzy-hook"
	[ -d "$HOME/.local/bin" ] || mkdir -p "$HOME/.local/bin"
	ln -sfn "$HOME/.local/share/gitmoji-fuzzy-hook/bin/gitmoji-fuzzy-hook-init.sh" "$HOME/.local/bin/gitmoji-fuzzy-hook-init"

	[[ $? ]] && print_success "Installed Gitmoji"
fi

if [[ "$OS" == "darwin" ]]; then
	seek_confirmation "Do you want to install the MacOS apps?"
	if is_confirmed; then
		brew install mas
		brew bundle --file="$INSTALL_DIR/opt/Brewfile.macos"
		[[ $? ]] && print_success "Installed all MacOS apps"
	fi
fi

# Install Whalebrew packages
if ! type -P 'whalebrew' &>/dev/null; then
	print_error "whalebrew not found"
	exit 1
else
	print_process "Installing and updating whalebrew packages"
	install_packages whalebrew_package "$INSTALL_DIR/opt/Brewfile.whale"

	[[ $? ]] && print_success "Installed all Whalebrew packages"
fi


[[ $? ]] && print_success "dotpackages installed."
